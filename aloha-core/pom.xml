<!--
================================================================================================================
================================================================================================================
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.eharmony</groupId>
		<artifactId>aloha</artifactId>
		<version>2.0.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<artifactId>aloha-core</artifactId>
	<packaging>jar</packaging>
	<name>${project.artifactId}</name>
	<description>Aloha core library</description>

	<url>${site.url}/${project.artifactId}</url>

	<distributionManagement>
		<site>
			<id>${site.deploy.id}</id>
			<!-- Note that GitHub does not like having leading slash here -->
			<url>${site.deploy.url}${project.artifactId}</url>
		</site>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<properties>
		<protobuf.version>2.4.1</protobuf.version>

		<proto.test.sources>${project.build.directory}/generated-test-sources</proto.test.sources>

		<!-- For spring framework testing -->
		<org.springframework.version>3.1.4.RELEASE</org.springframework.version>

		<!-- Must be at least 11.0 because 11.0 introduced hashing code. -->
		<gauva.version>11.0</gauva.version>

		<!--
    	Make the path to the proto compiler a property so that it can be overridden on the
    	command line like this:

	        mvn -Dprotoc=/opt/local/bin/protoc clean test
		-->
		<protoc>protoc</protoc>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-compiler</artifactId>
		</dependency>

		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
		</dependency>

		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-reflect</artifactId>
		</dependency>

		<dependency>
			<groupId>org.scalaz</groupId>
			<artifactId>scalaz-core_2.10</artifactId>
		</dependency>

		<!-- This is where the Score protobuf object comes from. -->
		<dependency>
			<groupId>com.eharmony</groupId>
			<artifactId>aloha-proto</artifactId>
			<version>2.0.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml</groupId>
			<artifactId>classmate</artifactId>
			<version>1.0.0</version>
		</dependency>

		<dependency>
			<groupId>com.github.scopt</groupId>
			<artifactId>scopt_${scala.major.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>${protobuf.version}</version>
		</dependency>

		<dependency>
			<groupId>com.twitter</groupId>
			<artifactId>util-core_${scala.major.version}</artifactId>
			<version>6.22.1</version>
		</dependency>

		<!-- For cli to decode base64-encoded protos. -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-vfs</groupId>
			<artifactId>commons-vfs</artifactId>
		</dependency>

		<dependency>
			<groupId>io.spray</groupId>
			<artifactId>spray-json_${scala.major.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-vfs2</artifactId>
		</dependency>

		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.9.9</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<!-- ============================================================================= -->
		<!--                                  Test Deps                                    -->
		<!-- ============================================================================= -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>cc.mallet</groupId>
			<artifactId>mallet</artifactId>
			<version>2.0.7</version>
			<scope>test</scope>
			<exclusions>
				<!--<exclusion>-->
					<!--<groupId>commons-logging</groupId>-->
					<!--<artifactId>commons-logging</artifactId>-->
				<!--</exclusion>-->
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>


		<!-- For testing spring integrations. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
			<exclusions>
				<!--<exclusion>-->
					<!--<groupId>commons-logging</groupId>-->
					<!--<artifactId>commons-logging</artifactId>-->
				<!--</exclusion>-->
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<!--
			Test resource filtering to have maven inject properties.  This is mainly for functionality that requires
			absolute paths.  Those paths are determined by maven and injected into the filtered files as they are
			copied over to the test target directory.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes</outputDirectory>
							<encoding>UTF-8</encoding>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<filtering>true</filtering>
									<includes>
										<include>**/version.properties</include>
									</includes>
								</resource>
								<resource>
									<directory>src/main/resources</directory>
									<filtering>false</filtering>
									<excludes>
										<exclude>**/version.properties</exclude>
									</excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-test-resources</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/test-classes</outputDirectory>
							<encoding>UTF-8</encoding>
							<resources>
								<resource>
									<directory>src/test/resources</directory>
									<filtering>true</filtering>
									<includes>
										<include>**/success_1_level_file.json</include>
										<include>mvn_gen_test.properties</include>
									</includes>
								</resource>
								<resource>
									<directory>src/test/resources</directory>
									<filtering>false</filtering>
									<excludes>
										<!--
											It's really important that test-protos.jar is not in target/test-classes.
											WE DON'T WANT IT ON THE CLASSPATH!
										-->
										<!--<exclude>**/test-protos.jar</exclude>-->
										<exclude>**/success_1_level_file.json</exclude>
										<exclude>mvn_gen_test.properties</exclude>
									</excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--<plugin>-->
				<!--<groupId>com.google.protobuf.tools</groupId>-->
				<!--<artifactId>maven-protoc-plugin</artifactId>-->
				<!--<version>0.1.10</version>-->
				<!--<executions>-->
					<!--<execution>-->
						<!--<id>test-protos</id>-->
						<!--<goals>-->
							<!--<goal>testCompile</goal>-->
						<!--</goals>-->
						<!--<phase>generate-sources</phase>-->
					<!--</execution>-->
				<!--</executions>-->
			<!--</plugin>-->

			<!--
			maven-antrun-plugin added to get test protos into target/generated-test-sources and then compiled
			classes into target/test-classes directories.

			TODO: Fix this using maven-protoc-plugin and appropriately phased maven-compiler-plugin. (RMD 2015-04-23)

			Both the antrun plugin and the build-helper-maven-plugin need to run using the generate-sources rather than
			the generate-test-sources because the tests won't compile otherwise. Removed the proto directory in
			generated-test-sources for IntelliJ interoperability.
			http://stackoverflow.com/questions/5170620/unable-to-use-intellij-with-a-generated-sources-folder
    		-->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>compile-test-protoc</id>
						<phase>generate-sources</phase>
						<configuration>
							<tasks>
								<!--
								This probably should go here but it's used to create the aloha generated class file
								cache directory.
								TODO: Put this somewhere else.
								-->
								<mkdir dir="${generated.classes.test}" />

								<mkdir dir="${project.build.directory}/generated-test-sources" />
								<path id="proto.path">
									<fileset dir="src/test/proto">
										<include name="**/*.proto" />
									</fileset>
								</path>
								<pathconvert pathsep=" " property="proto.files" refid="proto.path" />
								<!-- This required protoc to be installed INSTRUCTIONS: wget http://protobuf.googlecode.com/files/protobuf-2.4.1.tar.gz
									tar -xzf protobuf-2.4.1.tar.gz cd protobuf-2.4.1 sudo ./configure sudo make
									sudo make install If on a mac, sudo port install protobuf-java
								-->

								<echo message="Creating protobuf instance source" />
								<exec executable="${protoc}" failonerror="true">
									<arg value="--java_out=${project.build.directory}/generated-test-sources" />
									<arg value="-I${project.basedir}/src/test/proto" />
									<arg line="${proto.files}" />
								</exec>

								<!--
								=======================================================================================
								 This is a hack to get the protos compiled into the test-classes directory.
								 TODO: Fix this by using an appropriate maven-compiler-plugin execution. (RMD 2015-04-23)
								=======================================================================================
								-->
								<echo message="Compiling protobuf source to .class files." />
								<exec executable="javac" failonerror="true">
									<arg line="-d ${project.build.testOutputDirectory} -classpath ${settings.localRepository}/com/google/protobuf/protobuf-java/${protobuf.version}/protobuf-java-${protobuf.version}.jar ${project.build.directory}/generated-test-sources/com/eharmony/aloha/test/proto/TestProtoBuffs.java ${project.build.directory}/generated-test-sources/com/eharmony/aloha/test/proto/Testing.java" />
								</exec>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- This is necessary for compiling under maven 3 without -Drecompile.mode=incremental -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${proto.test.sources}</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>test-jar</id>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                        <configuration>
                            <includes>
								<include>**/aloha/test/proto/*</include>
								<include>**/FileLocations*</include>
								<include>**/JensenShannonDivergence*</include>
								<include>**/testhelp/**</include>
                                <include>**/README.md</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
		</plugins>
	</build>
</project>
