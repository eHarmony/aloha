/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.eharmony.aloha.audit.impl.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FlatScoreList extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1585245601377466884L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlatScoreList\",\"namespace\":\"com.eharmony.aloha.audit.impl.avro\",\"fields\":[{\"name\":\"scores\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FlatScore\",\"fields\":[{\"name\":\"model\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ModelId\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"boolean\",\"int\",\"long\",\"float\",\"double\",\"string\",{\"type\":\"array\",\"items\":[\"boolean\",\"int\",\"long\",\"float\",\"double\",\"string\"]}],\"default\":null},{\"name\":\"subvalues\",\"type\":[{\"type\":\"array\",\"items\":\"int\"},\"null\"],\"doc\":\"Each value in subvalues is an index in the FlatScoreList.scores.\\n     E.g., 1 means the FlatScore at index 1 in FlatScoreList.scores is a subvalue of this FlatScore.\",\"default\":[]},{\"name\":\"errorMsgs\",\"type\":[{\"type\":\"array\",\"items\":\"string\"},\"null\"],\"default\":[]},{\"name\":\"missingVarNames\",\"type\":[{\"type\":\"array\",\"items\":\"string\"},\"null\"],\"default\":[]},{\"name\":\"prob\",\"type\":[\"null\",\"float\"],\"default\":null}]}}],\"doc\":\"The first element in the list is the root score.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The first element in the list is the root score. */
  @Deprecated public java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore> scores;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlatScoreList() {}

  /**
   * All-args constructor.
   * @param scores The first element in the list is the root score.
   */
  public FlatScoreList(java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore> scores) {
    this.scores = scores;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return scores;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: scores = (java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'scores' field.
   * @return The first element in the list is the root score.
   */
  public java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore> getScores() {
    return scores;
  }

  /**
   * Sets the value of the 'scores' field.
   * The first element in the list is the root score.
   * @param value the value to set.
   */
  public void setScores(java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore> value) {
    this.scores = value;
  }

  /**
   * Creates a new FlatScoreList RecordBuilder.
   * @return A new FlatScoreList RecordBuilder
   */
  public static com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder newBuilder() {
    return new com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder();
  }

  /**
   * Creates a new FlatScoreList RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlatScoreList RecordBuilder
   */
  public static com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder newBuilder(com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder other) {
    return new com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder(other);
  }

  /**
   * Creates a new FlatScoreList RecordBuilder by copying an existing FlatScoreList instance.
   * @param other The existing instance to copy.
   * @return A new FlatScoreList RecordBuilder
   */
  public static com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder newBuilder(com.eharmony.aloha.audit.impl.avro.FlatScoreList other) {
    return new com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder(other);
  }

  /**
   * RecordBuilder for FlatScoreList instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlatScoreList>
    implements org.apache.avro.data.RecordBuilder<FlatScoreList> {

    /** The first element in the list is the root score. */
    private java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore> scores;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.scores)) {
        this.scores = data().deepCopy(fields()[0].schema(), other.scores);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FlatScoreList instance
     * @param other The existing instance to copy.
     */
    private Builder(com.eharmony.aloha.audit.impl.avro.FlatScoreList other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.scores)) {
        this.scores = data().deepCopy(fields()[0].schema(), other.scores);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'scores' field.
      * The first element in the list is the root score.
      * @return The value.
      */
    public java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore> getScores() {
      return scores;
    }

    /**
      * Sets the value of the 'scores' field.
      * The first element in the list is the root score.
      * @param value The value of 'scores'.
      * @return This builder.
      */
    public com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder setScores(java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore> value) {
      validate(fields()[0], value);
      this.scores = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'scores' field has been set.
      * The first element in the list is the root score.
      * @return True if the 'scores' field has been set, false otherwise.
      */
    public boolean hasScores() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'scores' field.
      * The first element in the list is the root score.
      * @return This builder.
      */
    public com.eharmony.aloha.audit.impl.avro.FlatScoreList.Builder clearScores() {
      scores = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public FlatScoreList build() {
      try {
        FlatScoreList record = new FlatScoreList();
        record.scores = fieldSetFlags()[0] ? this.scores : (java.util.List<com.eharmony.aloha.audit.impl.avro.FlatScore>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
